# admin_export.py
import openpyxl
from openpyxl.utils import get_column_letter
from openpyxl.styles import Font, Alignment, Border, Side
from django.http import HttpResponse
from django.contrib import admin
from django.utils import timezone
from .models import Lead


def export_leads_to_excel(modeladmin, request, queryset):
    """
    –≠–∫—Å–ø–æ—Ä—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –≤ Excel
    """
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–Ω–∏–≥—É Excel
    wb = openpyxl.Workbook()
    ws = wb.active
    ws.title = "–ó–∞—è–≤–∫–∏"

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
    headers = [
        'ID',
        '–§–ò–û',
        '–¢–µ–ª–µ—Ñ–æ–Ω',
        '–ê–¥—Ä–µ—Å',
        '–†–µ–≥–∏–æ–Ω',
        '–¢–∞—Ä–∏—Ñ',
        '–¶–µ–Ω–∞',
        '–°–∫–æ—Ä–æ—Å—Ç—å',
        '–¢–í',
        '–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä',
        '–ú–æ–±. –∏–Ω—Ç–µ—Ä–Ω–µ—Ç (–ì–ë)',
        '–ú–∏–Ω—É—Ç—ã',
        'SMS',
        '–°—Ç–∞—Ç—É—Å',
        '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è',
        '–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
        '–î–∞—Ç–∞ –º–æ–Ω—Ç–∞–∂–∞',
        '–û–ø–µ—Ä–∞—Ç–æ—Ä',
        '–ü—Ä–∏–º–µ—á–∞–Ω–∏—è'
    ]

    # –°—Ç–∏–ª–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    header_font = Font(bold=True, color="FFFFFF")
    header_fill = openpyxl.styles.PatternFill(start_color="366092", end_color="366092", fill_type="solid")
    alignment = Alignment(horizontal='center', vertical='center', wrap_text=True)
    thin_border = Border(
        left=Side(style='thin'),
        right=Side(style='thin'),
        top=Side(style='thin'),
        bottom=Side(style='thin')
    )

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    for col_num, header in enumerate(headers, 1):
        cell = ws.cell(row=1, column=col_num, value=header)
        cell.font = header_font
        cell.fill = header_fill
        cell.alignment = alignment
        cell.border = thin_border

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    for row_num, lead in enumerate(queryset, 2):
        ws.cell(row=row_num, column=1, value=lead.id)
        ws.cell(row=row_num, column=2, value=lead.fio)
        ws.cell(row=row_num, column=3, value=lead.phone)
        ws.cell(row=row_num, column=4, value=lead.address)
        ws.cell(row=row_num, column=5, value=str(lead.region))
        ws.cell(row=row_num, column=6, value=lead.tariff.name)
        ws.cell(row=row_num, column=7, value=lead.tariff.price)
        ws.cell(row=row_num, column=8, value=lead.tariff.speed or '')
        ws.cell(row=row_num, column=9, value='–î–∞' if lead.tariff.interactive_tv else '–ù–µ—Ç')
        ws.cell(row=row_num, column=10, value='–î–∞' if lead.tariff.online_cinema else '–ù–µ—Ç')
        ws.cell(row=row_num, column=11, value=lead.tariff.mobile_data)
        ws.cell(row=row_num, column=12, value=lead.tariff.mobile_minutes)
        ws.cell(row=row_num, column=13, value=lead.tariff.mobile_sms)
        ws.cell(row=row_num, column=14, value=lead.get_status_display())
        ws.cell(row=row_num, column=15, value=timezone.localtime(lead.created_at).strftime('%d.%m.%Y %H:%M'))
        ws.cell(row=row_num, column=16,
                value=timezone.localtime(lead.updated_at).strftime('%d.%m.%Y %H:%M') if lead.updated_at else '')
        ws.cell(row=row_num, column=17, value=timezone.localtime(lead.installation_date).strftime(
            '%d.%m.%Y %H:%M') if lead.installation_date else '')
        ws.cell(row=row_num, column=18, value=lead.operator.username if lead.operator else '')
        ws.cell(row=row_num, column=19, value=lead.notes or '')

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
    column_widths = [8, 25, 15, 30, 20, 20, 10, 12, 8, 12, 15, 10, 8, 15, 16, 16, 16, 15, 30]
    for i, width in enumerate(column_widths, 1):
        ws.column_dimensions[get_column_letter(i)].width = width

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∫–æ –≤—Å–µ–º —è—á–µ–π–∫–∞–º
    for row in ws.iter_rows(min_row=1, max_row=len(queryset) + 1, max_col=len(headers)):
        for cell in row:
            cell.border = thin_border
            if cell.row != 1:  # –ù–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫
                cell.alignment = Alignment(vertical='center', wrap_text=True)

    # –°–æ–∑–¥–∞–µ–º HTTP response —Å —Ñ–∞–π–ª–æ–º Excel
    response = HttpResponse(
        content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    )
    response['Content-Disposition'] = f'attachment; filename=leads_export_{timezone.now().strftime("%Y%m%d_%H%M")}.xlsx'

    wb.save(response)
    return response


export_leads_to_excel.short_description = "üìä –≠–∫—Å–ø–æ—Ä—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –≤ Excel"


def export_all_leads_to_excel(modeladmin, request, queryset):
    """
    –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ –≤ Excel
    """
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏
    all_leads = Lead.objects.all()
    return export_leads_to_excel(modeladmin, request, all_leads)


# admin_export.py (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
def export_filtered_leads(modeladmin, request, queryset):
    """
    –≠–∫—Å–ø–æ—Ä—Ç —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –¥–∞—Ç–∞–º —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É
    """
    if request.method == 'POST':
        start_date = request.POST.get('start_date')
        end_date = request.POST.get('end_date')

        leads = Lead.objects.all()
        if start_date:
            leads = leads.filter(created_at__date__gte=start_date)
        if end_date:
            leads = leads.filter(created_at__date__lte=end_date)

        return export_leads_to_excel(modeladmin, request, leads)

    # –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç
    from django.shortcuts import render
    return render(request, 'admin/leads_export_form.html')


export_filtered_leads.short_description = "üìÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞—è–≤–æ–∫ –ø–æ –¥–∞—Ç–∞–º"

export_all_leads_to_excel.short_description = "üìä –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ –≤ Excel"