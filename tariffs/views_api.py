from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_POST
import json
from .models import Lead, Tariff, Region  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç Region
import logging

logger = logging.getLogger(__name__)


@csrf_exempt
@require_POST
def create_lead(request):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –∏–∑ —Ñ–æ—Ä–º—ã
    """
    try:
        logger.info("üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏")

        # –ü–∞—Ä—Å–∏–º JSON –¥–∞–Ω–Ω—ã–µ
        try:
            data = json.loads(request.body)
            logger.info(f"üìã –î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏: {data}")
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            return JsonResponse({'error': '–ù–µ–≤–µ—Ä–Ω—ã–π JSON'}, status=400)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required_fields = ['fio', 'phone', 'address', 'tariff']
        missing_fields = []

        for field in required_fields:
            if field not in data or not str(data[field]).strip():
                missing_fields.append(field)

        if missing_fields:
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}")
            return JsonResponse({'error': f'–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {", ".join(missing_fields)}'}, status=400)

        # –ü–æ–ª—É—á–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞—Ä–∏—Ñ
        try:
            tariff_id = int(data['tariff'])
            tariff = Tariff.objects.get(id=tariff_id)
            logger.info(f"‚úÖ –¢–∞—Ä–∏—Ñ –Ω–∞–π–¥–µ–Ω: {tariff.name}")
        except (Tariff.DoesNotExist, ValueError) as e:
            logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ ID: {data.get('tariff')}, –æ—à–∏–±–∫–∞: {e}")
            return JsonResponse({'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ'}, status=400)

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–≥–∏–æ–Ω –∏–∑ —Ç–∞—Ä–∏—Ñ–∞ (–æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–±)
        region = tariff.region
        logger.info(f"üìç –†–µ–≥–∏–æ–Ω –∏–∑ —Ç–∞—Ä–∏—Ñ–∞: {region.name}")

        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ: –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ä–µ–≥–∏–æ–Ω –ø–æ –¥–∞–Ω–Ω—ã–º –∏–∑ —Ñ–æ—Ä–º—ã
        region_name_from_form = data.get('region', '').strip()
        if region_name_from_form:
            try:
                # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
                region_name_clean = ' '.join(region_name_from_form.split())
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ä–µ–≥–∏–æ–Ω –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                region_from_form = Region.objects.get(name=region_name_clean)
                region = region_from_form
                logger.info(f"üìç –†–µ–≥–∏–æ–Ω –∏–∑ —Ñ–æ—Ä–º—ã: {region.name}")
            except Region.DoesNotExist:
                logger.warning(f"‚ö†Ô∏è –†–µ–≥–∏–æ–Ω '{region_name_clean}' –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥–∏–æ–Ω —Ç–∞—Ä–∏—Ñ–∞")
            except Region.MultipleObjectsReturned:
                logger.warning(
                    f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–≥–∏–æ–Ω–æ–≤ —Å –∏–º–µ–Ω–µ–º '{region_name_clean}', –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥–∏–æ–Ω —Ç–∞—Ä–∏—Ñ–∞")

        # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
        try:
            lead = Lead.objects.create(
                fio=data['fio'].strip(),
                phone=data['phone'].strip(),
                address=data['address'].strip(),
                tariff=tariff,
                region=region,  # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Region
                notes=data.get('notes', '').strip()
            )

            logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ID {lead.id}, –§–ò–û: {lead.fio}, –†–µ–≥–∏–æ–Ω: {region.name}")

            return JsonResponse({
                'success': True,
                'message': '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞',
                'lead_id': lead.id
            })

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
            return JsonResponse({'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏'}, status=500)

    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return JsonResponse({'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}, status=500)