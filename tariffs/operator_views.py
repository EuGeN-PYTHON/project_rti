import logging
from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required, user_passes_test
from django.utils import timezone
from django.contrib import messages
from django.db.models import Q
from django.http import JsonResponse
from .models import Lead, Tariff, Region
from .telegram_bot import send_lead_to_telegram

# –õ–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)


def is_operator(user):
    return user.groups.filter(name='Operators').exists() or user.is_staff


@login_required
@user_passes_test(is_operator)
def operator_dashboard(request):
    """–î–∞—à–±–æ—Ä–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ - –¢–û–õ–¨–ö–û –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏"""
    new_leads = Lead.objects.filter(status='new').order_by('created_at')
    return render(request, 'operator/dashboard.html', {'new_leads': new_leads})


@login_required
@user_passes_test(is_operator)
def take_lead(request, lead_id):
    """–í–∑—è—Ç—å –∑–∞—è–≤–∫—É –≤ —Ä–∞–±–æ—Ç—É - —Å—Ä–∞–∑—É –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    lead = get_object_or_404(Lead, id=lead_id, status='new')

    # –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    lead.operator = request.user
    lead.updated_at = timezone.now()
    lead.save()

    # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ç–∞—Ä–∏—Ñ—ã –ø–æ —Ä–µ–≥–∏–æ–Ω—É –∑–∞—è–≤–∫–∏
    try:
        # –ò—â–µ–º —Ä–µ–≥–∏–æ–Ω –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–∑ –∑–∞—è–≤–∫–∏
        region = Region.objects.get(name=lead.region)
        tariffs = Tariff.objects.filter(region=region)
    except Region.DoesNotExist:
        # –ï—Å–ª–∏ —Ä–µ–≥–∏–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–∞—Ä–∏—Ñ—ã
        tariffs = Tariff.objects.all()

    # –ï—Å–ª–∏ —Ç–∞—Ä–∏—Ñ–æ–≤ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ
    if not tariffs.exists():
        tariffs = Tariff.objects.all()

    print(f"–ó–∞—è–≤–∫–∞: {lead.id}, –†–µ–≥–∏–æ–Ω: '{lead.region}'")
    print(f"–ù–∞–π–¥–µ–Ω–æ —Ç–∞—Ä–∏—Ñ–æ–≤: {tariffs.count()}")

    return render(request, 'operator/edit_lead.html', {
        'lead': lead,
        'tariffs': tariffs,
        'status_choices': Lead.STATUS_CHOICES
    })


@login_required
@user_passes_test(is_operator)
def update_lead(request, lead_id):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    lead = get_object_or_404(Lead, id=lead_id, operator=request.user)

    if request.method == 'POST':
        new_status = request.POST.get('status')
        installation_date = request.POST.get('installation_date')
        notes = request.POST.get('notes')
        tariff_id = request.POST.get('tariff')

        logger.info(f"üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ #{lead.id} –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º {request.user.username}")
        logger.info(f"   –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {new_status}")
        logger.info(f"   –î–∞—Ç–∞ –º–æ–Ω—Ç–∞–∂–∞: {installation_date}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞—Ä–∏—Ñ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –Ω–æ–≤—ã–π
        if tariff_id:
            try:
                new_tariff = Tariff.objects.get(id=tariff_id)
                lead.tariff = new_tariff
                logger.info(f"   –¢–∞—Ä–∏—Ñ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_tariff.name}")
            except Tariff.DoesNotExist:
                logger.warning(f"   –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∞—Ä–∏—Ñ: {tariff_id}")
                messages.error(request, '–í—ã–±—Ä–∞–Ω –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∞—Ä–∏—Ñ')

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        if new_status in dict(Lead.STATUS_CHOICES):
            old_status = lead.status
            lead.status = new_status

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –º–æ–Ω—Ç–∞–∂–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π)
            if installation_date:
                try:
                    lead.installation_date = timezone.datetime.strptime(installation_date, '%Y-%m-%dT%H:%M')
                    logger.info(f"   –î–∞—Ç–∞ –º–æ–Ω—Ç–∞–∂–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {lead.installation_date}")
                except ValueError:
                    logger.error("   –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –º–æ–Ω—Ç–∞–∂–∞")
                    messages.error(request, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã')
            else:
                # –ï—Å–ª–∏ –¥–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞ - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º None
                lead.installation_date = None
                logger.info("   –î–∞—Ç–∞ –º–æ–Ω—Ç–∞–∂–∞ –æ—á–∏—â–µ–Ω–∞")

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏—è
            if notes:
                lead.notes = notes
                logger.info("   –ü—Ä–∏–º–µ—á–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

            lead.updated_at = timezone.now()
            lead.save()

            logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ #{lead.id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –°—Ç–∞—Ç—É—Å: {old_status} ‚Üí {new_status}")

            # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ "–ü–µ—Ä–µ–¥–∞–Ω–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É"
            if new_status == 'transferred' and old_status != 'transferred':
                logger.info("üîÑ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '–ü–µ—Ä–µ–¥–∞–Ω–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É'")

                # –û–¢–ü–†–ê–í–õ–Ø–ï–ú –í TELEGRAM –î–ê–ñ–ï –ë–ï–ó –î–ê–¢–´ –ú–û–ù–¢–ê–ñ–ê
                logger.info("üìã –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram...")
                telegram_success = send_lead_to_telegram(lead)

                if telegram_success:
                    messages.success(request, '‚úÖ –ó–∞—è–≤–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram!')
                    logger.info("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram –ø–æ–∫–∞–∑–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
                else:
                    messages.warning(request,
                                     '‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.')
                    logger.warning("‚ö†Ô∏è –ü–æ–∫–∞–∑–∞–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ —Å Telegram")

            else:
                messages.success(request, '‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')
                logger.info("‚úÖ –û–±—ã—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–∫–∞–∑–∞–Ω–æ")

            return redirect('operator_dashboard')
        else:
            logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {new_status}")
            messages.error(request, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏')

    tariffs = Tariff.objects.all()
    return render(request, 'operator/edit_lead.html', {
        'lead': lead,
        'tariffs': tariffs,
        'status_choices': Lead.STATUS_CHOICES
    })

@login_required
@user_passes_test(is_operator)
def view_lead(request, lead_id):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–∫–∏ (—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ)"""
    lead = get_object_or_404(Lead, id=lead_id)
    return render(request, 'operator/view_lead.html', {'lead': lead})


@login_required
@user_passes_test(is_operator)
def search_leads(request):
    """–ü–æ–∏—Å–∫ –∑–∞—è–≤–æ–∫ - –¢–û–õ–¨–ö–û –Ω–æ–≤—ã–µ"""
    query = request.GET.get('q', '').strip()

    if query:
        leads = Lead.objects.filter(
            Q(fio__icontains=query) |
            Q(phone__icontains=query) |
            Q(address__icontains=query) |
            Q(notes__icontains=query),
            status='new'  # –¢–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏
        ).order_by('-created_at')
    else:
        leads = Lead.objects.none()

    return render(request, 'operator/search_results.html', {
        'leads': leads,
        'query': query
    })