import requests
import json
from django.conf import settings
from django.utils import timezone
import logging

logger = logging.getLogger(__name__)


def send_lead_to_telegram(lead):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –≤ Telegram —á–∞—Ç —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    """
    logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ #{lead.id} –≤ Telegram")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    telegram_bot_token = getattr(settings, 'TELEGRAM_BOT_TOKEN', '')
    telegram_chat_id = getattr(settings, 'TELEGRAM_CHAT_ID', '')

    if not telegram_bot_token:
        logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ settings.py")
        return False

    if not telegram_chat_id:
        logger.error("‚ùå TELEGRAM_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ settings.py")
        return False

    logger.info(f"üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram: TOKEN={telegram_bot_token[:10]}..., CHAT_ID={telegram_chat_id}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–∞—Ç–∞ –º–æ–Ω—Ç–∞–∂–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å null)
    installation_date_info = ""
    if lead.installation_date:
        installation_date_info = f"üìÖ *–î–∞—Ç–∞ –º–æ–Ω—Ç–∞–∂–∞:* {lead.installation_date.strftime('%d.%m.%Y %H:%M')}"
    else:
        installation_date_info = "üìÖ *–î–∞—Ç–∞ –º–æ–Ω—Ç–∞–∂–∞:* –ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ (—Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Ç–æ—á–Ω–∏—Ç—å)"

    message = f"""
üìã *–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ü–ï–†–ï–î–ê–ù–ê –ü–†–û–í–ê–ô–î–ï–†–£*

üë§ *–§–ò–û:* {lead.fio}
üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {lead.phone}
üè† *–ê–¥—Ä–µ—Å:* {lead.address}
üìç *–†–µ–≥–∏–æ–Ω:* {lead.region}

üìä *–¢–∞—Ä–∏—Ñ:* {lead.tariff.name}
üí∞ *–¶–µ–Ω–∞:* {lead.tariff.price} ‚ÇΩ/–º–µ—Å
‚ö° *–°–∫–æ—Ä–æ—Å—Ç—å:* {lead.tariff.speed or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}

{installation_date_info}
üë®‚Äçüíº *–û–ø–µ—Ä–∞—Ç–æ—Ä:* {lead.operator.username if lead.operator else '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}

üîó *ID –∑–∞—è–≤–∫–∏:* {lead.id}
‚è∞ *–°–æ–∑–¥–∞–Ω–∞:* {lead.created_at.strftime('%d.%m.%Y %H:%M')}

üí° *–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:* –î–∞—Ç–∞ –º–æ–Ω—Ç–∞–∂–∞ –±—É–¥–µ—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
    """

    url = f"https://api.telegram.org/bot{telegram_bot_token}/sendMessage"

    payload = {
        'chat_id': telegram_chat_id,
        'text': message,
        'parse_mode': 'Markdown',
        'disable_web_page_preview': True
    }

    try:
        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Telegram API...")
        response = requests.post(url, json=payload, timeout=10)

        logger.info(f"üì© –û—Ç–≤–µ—Ç –æ—Ç Telegram: {response.status_code}")

        if response.status_code == 200:
            result = response.json()
            if result.get('ok'):
                logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ #{lead.id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram!")
                lead.is_transferred_to_telegram = True
                lead.save()
                return True
            else:
                error_msg = result.get('description', 'Unknown error')
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {error_msg}")
                return False
        else:
            logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞ {response.status_code}: {response.text}")
            return False

    except requests.exceptions.RequestException as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")
        return False
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False